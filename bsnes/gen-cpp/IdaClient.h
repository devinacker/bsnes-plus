/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IdaClient_H
#define IdaClient_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "debug_proto_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IdaClientIf {
 public:
  virtual ~IdaClientIf() {}
  virtual void start_event() = 0;
  virtual void add_visited(const std::vector<int32_t> & changed) = 0;
  virtual void pause_event(const int32_t address) = 0;
  virtual void stop_event() = 0;
};

class IdaClientIfFactory {
 public:
  typedef IdaClientIf Handler;

  virtual ~IdaClientIfFactory() {}

  virtual IdaClientIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IdaClientIf* /* handler */) = 0;
};

class IdaClientIfSingletonFactory : virtual public IdaClientIfFactory {
 public:
  IdaClientIfSingletonFactory(const ::std::shared_ptr<IdaClientIf>& iface) : iface_(iface) {}
  virtual ~IdaClientIfSingletonFactory() {}

  virtual IdaClientIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IdaClientIf* /* handler */) {}

 protected:
  ::std::shared_ptr<IdaClientIf> iface_;
};

class IdaClientNull : virtual public IdaClientIf {
 public:
  virtual ~IdaClientNull() {}
  void start_event() {
    return;
  }
  void add_visited(const std::vector<int32_t> & /* changed */) {
    return;
  }
  void pause_event(const int32_t /* address */) {
    return;
  }
  void stop_event() {
    return;
  }
};


class IdaClient_start_event_args {
 public:

  IdaClient_start_event_args(const IdaClient_start_event_args&);
  IdaClient_start_event_args& operator=(const IdaClient_start_event_args&);
  IdaClient_start_event_args() {
  }

  virtual ~IdaClient_start_event_args() noexcept;

  bool operator == (const IdaClient_start_event_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IdaClient_start_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdaClient_start_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IdaClient_start_event_pargs {
 public:


  virtual ~IdaClient_start_event_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IdaClient_add_visited_args__isset {
  _IdaClient_add_visited_args__isset() : changed(false) {}
  bool changed :1;
} _IdaClient_add_visited_args__isset;

class IdaClient_add_visited_args {
 public:

  IdaClient_add_visited_args(const IdaClient_add_visited_args&);
  IdaClient_add_visited_args& operator=(const IdaClient_add_visited_args&);
  IdaClient_add_visited_args() {
  }

  virtual ~IdaClient_add_visited_args() noexcept;
  std::vector<int32_t>  changed;

  _IdaClient_add_visited_args__isset __isset;

  void __set_changed(const std::vector<int32_t> & val);

  bool operator == (const IdaClient_add_visited_args & rhs) const
  {
    if (!(changed == rhs.changed))
      return false;
    return true;
  }
  bool operator != (const IdaClient_add_visited_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdaClient_add_visited_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IdaClient_add_visited_pargs {
 public:


  virtual ~IdaClient_add_visited_pargs() noexcept;
  const std::vector<int32_t> * changed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IdaClient_pause_event_args__isset {
  _IdaClient_pause_event_args__isset() : address(false) {}
  bool address :1;
} _IdaClient_pause_event_args__isset;

class IdaClient_pause_event_args {
 public:

  IdaClient_pause_event_args(const IdaClient_pause_event_args&);
  IdaClient_pause_event_args& operator=(const IdaClient_pause_event_args&);
  IdaClient_pause_event_args() : address(0) {
  }

  virtual ~IdaClient_pause_event_args() noexcept;
  int32_t address;

  _IdaClient_pause_event_args__isset __isset;

  void __set_address(const int32_t val);

  bool operator == (const IdaClient_pause_event_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const IdaClient_pause_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdaClient_pause_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IdaClient_pause_event_pargs {
 public:


  virtual ~IdaClient_pause_event_pargs() noexcept;
  const int32_t* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IdaClient_stop_event_args {
 public:

  IdaClient_stop_event_args(const IdaClient_stop_event_args&);
  IdaClient_stop_event_args& operator=(const IdaClient_stop_event_args&);
  IdaClient_stop_event_args() {
  }

  virtual ~IdaClient_stop_event_args() noexcept;

  bool operator == (const IdaClient_stop_event_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IdaClient_stop_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdaClient_stop_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IdaClient_stop_event_pargs {
 public:


  virtual ~IdaClient_stop_event_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class IdaClientClient : virtual public IdaClientIf {
 public:
  IdaClientClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IdaClientClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start_event();
  void send_start_event();
  void add_visited(const std::vector<int32_t> & changed);
  void send_add_visited(const std::vector<int32_t> & changed);
  void pause_event(const int32_t address);
  void send_pause_event(const int32_t address);
  void stop_event();
  void send_stop_event();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IdaClientProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IdaClientIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IdaClientProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_start_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_visited(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pause_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IdaClientProcessor(::std::shared_ptr<IdaClientIf> iface) :
    iface_(iface) {
    processMap_["start_event"] = &IdaClientProcessor::process_start_event;
    processMap_["add_visited"] = &IdaClientProcessor::process_add_visited;
    processMap_["pause_event"] = &IdaClientProcessor::process_pause_event;
    processMap_["stop_event"] = &IdaClientProcessor::process_stop_event;
  }

  virtual ~IdaClientProcessor() {}
};

class IdaClientProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IdaClientProcessorFactory(const ::std::shared_ptr< IdaClientIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< IdaClientIfFactory > handlerFactory_;
};

class IdaClientMultiface : virtual public IdaClientIf {
 public:
  IdaClientMultiface(std::vector<std::shared_ptr<IdaClientIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IdaClientMultiface() {}
 protected:
  std::vector<std::shared_ptr<IdaClientIf> > ifaces_;
  IdaClientMultiface() {}
  void add(::std::shared_ptr<IdaClientIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void start_event() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_event();
    }
    ifaces_[i]->start_event();
  }

  void add_visited(const std::vector<int32_t> & changed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_visited(changed);
    }
    ifaces_[i]->add_visited(changed);
  }

  void pause_event(const int32_t address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pause_event(address);
    }
    ifaces_[i]->pause_event(address);
  }

  void stop_event() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop_event();
    }
    ifaces_[i]->stop_event();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IdaClientConcurrentClient : virtual public IdaClientIf {
 public:
  IdaClientConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IdaClientConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start_event();
  void send_start_event();
  void add_visited(const std::vector<int32_t> & changed);
  void send_add_visited(const std::vector<int32_t> & changed);
  void pause_event(const int32_t address);
  void send_pause_event(const int32_t address);
  void stop_event();
  void send_stop_event();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
